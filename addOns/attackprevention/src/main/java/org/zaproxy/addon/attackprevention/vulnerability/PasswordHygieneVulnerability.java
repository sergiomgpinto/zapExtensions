package org.zaproxy.addon.attackprevention.vulnerability;

import org.zaproxy.addon.attackprevention.rules.Rule;
import org.zaproxy.addon.attackprevention.rules.RuleDTO;
import org.zaproxy.addon.attackprevention.rules.phishing.SameCredentialsRuleChecker;
import org.zaproxy.addon.attackprevention.utils.JSONLoader;
import org.zaproxy.addon.attackprevention.rules.passwordhygiene.PwdCrackLibRuleChecker;
import org.zaproxy.addon.attackprevention.rules.passwordhygiene.PwdOnlyNumbersRuleChecker;
import org.zaproxy.addon.attackprevention.rules.passwordhygiene.PwdTop500RuleChecker;

import java.util.ArrayList;
import java.util.List;

/**
 * This class inherits from the abstract
 * class Vulnerability and has the methods
 * to evaluate if there is a
 * Password Hygiene vulnerability.
 *
 * @see Vulnerability
 * @see Rule
 * @see PwdOnlyNumbersRuleChecker
 * @see PwdTop500RuleChecker
 * @see PwdCrackLibRuleChecker
 */
public class PasswordHygieneVulnerability implements Vulnerability {

    private final List<Rule> rules;
    private final String PASSED_RULE = JSONLoader.getLabel("PASSED_RULE");

    /**
     * This method is the class constructor.
     * It contains a list of rules which
     * will be used to verify the user
     * password.
     *
     * @param password - The password from the user.
     */

    public PasswordHygieneVulnerability(String password) {
        rules = new ArrayList<>();
        rules.add(new PwdTop500RuleChecker(password));
        rules.add(new PwdOnlyNumbersRuleChecker(password));
        rules.add(new PwdCrackLibRuleChecker(password));
    }

    /**
     * This method verifies if the user password
     * may encompass a password hygiene
     * vulnerability.
     *
     * @return PASSED_RULE if the user password
     * passes all the passwordHygiene rules
     * else the according message.
     */
    @Override
    public String evaluateVulnerability() {

        for (Rule rule : rules) {

            RuleDTO result = rule.checkRule();
            if (!result.getResult().equals(PASSED_RULE)) {
                return result.getResult();
            }
        }
        return PASSED_RULE;
    }
}

