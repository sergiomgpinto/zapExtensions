package org.zaproxy.addon.attackprevention.vulnerability;

import org.zaproxy.addon.attackprevention.rules.Rule;
import org.zaproxy.addon.attackprevention.utils.JSONLoader;
import org.zaproxy.addon.attackprevention.database.TyposquattingHistory;
import org.zaproxy.addon.attackprevention.rules.typosquatting.CombosquattingRuleChecker;
import org.zaproxy.addon.attackprevention.rules.typosquatting.ExtraCharRuleChecker;
import org.zaproxy.addon.attackprevention.rules.typosquatting.SwappedCharRuleChecker;
import org.zaproxy.addon.attackprevention.rules.typosquatting.MissingCharRuleChecker;
import org.zaproxy.addon.attackprevention.rules.typosquatting.ReplacedCharRuleChecker;

import java.util.ArrayList;
import java.util.List;

/**
 * This class inherits from the abstract
 * class Vulnerability and has the methods
 * to evaluate if there is a typo
 * squatting attack.
 *
 * @see Vulnerability
 * @see Rule
 * @see CombosquattingRuleChecker
 * @see ExtraCharRuleChecker
 * @see SwappedCharRuleChecker
 * @see MissingCharRuleChecker
 */
public class TypoSquattingVulnerability implements Vulnerability {

    private final String typedWebsitedUri;
    private final TyposquattingHistory history;
    private final List<Rule> rules;
    private final String PASSED_RULE = JSONLoader.getLabel("PASSED_RULE");

    /**
     * This method is the class constructor.
     * It contains a list of rules which
     * will be used to verify the website
     * in the given uri with the previously
     * recorded history.
     *
     * @param typedWebsiteUri - The uri of the typed website.
     * @param history - The history of the previously visited websites.
     */
    public TypoSquattingVulnerability(String typedWebsiteUri, TyposquattingHistory history) {
        this.typedWebsitedUri = typedWebsiteUri;
        this.history = history;

        rules = new ArrayList<>();
        rules.add(new CombosquattingRuleChecker());
        rules.add(new ExtraCharRuleChecker());
        rules.add(new ReplacedCharRuleChecker());
        rules.add(new SwappedCharRuleChecker());
        rules.add(new MissingCharRuleChecker());
    }

    /**
     * This method verifies if the typedWebsite
     * encompasses a typo squatting attack.
     *
     * @return PASSED_RULE if the typedWebsite
     * is legitimate else a recently visited website
     * by which the given typedWebsite fulfilled
     * a rule which detected an attack.
     */
    @Override
    public String evaluateVulnerability() {

        if (history.isLegitimate(typedWebsitedUri)) {
            return PASSED_RULE;
        }

        for (String visited : history.getVisited()) {

            String knownWebsite = visited.substring(visited.indexOf("://") + 3);
            String typedWebsite = typedWebsitedUri.substring(
                    typedWebsitedUri.indexOf("://") + 3);

            for (Rule rule : rules) {
                rule.setKnownWebsite(knownWebsite);
                rule.setTypedWebsite(typedWebsite);
                if (rule.checkRule().hasPassed()) {
                    return visited;
                }
            }
        }
        return PASSED_RULE;
    }
}
