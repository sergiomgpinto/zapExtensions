package org.zaproxy.addon.attackprevention;

import org.parosproxy.paros.network.HttpMalformedHeaderException;
import org.parosproxy.paros.network.HttpMessage;
import org.zaproxy.addon.attackprevention.database.TyposquattingHistory;
import org.zaproxy.addon.attackprevention.parser.FormParser;
import org.zaproxy.addon.attackprevention.parser.Parser;
import org.zaproxy.addon.attackprevention.ui.TypoSquattingWarningCreator;
import org.zaproxy.addon.attackprevention.ui.WarningCreator;
import org.zaproxy.addon.attackprevention.utils.JSONLoader;
import org.zaproxy.addon.attackprevention.vulnerability.TypoSquattingVulnerability;

import java.util.Objects;

/**
 * This class implements the logic to handle a request from
 * which the website address typed into the web browser
 * is typosquatted.
 *
 * @see AttackPreventionResponseManager
 */
public class TyposquattingVulnerabilityResponseManager extends AttackPreventionResponseManager {

    private final TypoSquattingWarningCreator typoSquattingWarningCreator;
    private final TyposquattingHistory hist;
    private String clashingSite;
    private HttpMessage msg;
    private final String PASSED_RULE = JSONLoader.getLabel("PASSED_RULE");

    /**
     * Constructor of the class.
     * The attack variable contains which verifies
     * if the request encompasses a typosquatting
     * attack.
     *
     * @see TypoSquattingVulnerability
     *
     * The hist variable owns the recordings of
     * visited and legitimate websites needed
     * for the correct handling of the request.
     *
     * @see TyposquattingHistory
     */
    public TyposquattingVulnerabilityResponseManager() {
        typoSquattingWarningCreator = new TypoSquattingWarningCreator();
        hist = new TyposquattingHistory();
    }

    /**
     * This method handles the request properly
     * according to its domain name and
     * previously recorded information
     * to detect a typosquatting
     * attack.
     *
     * @param msg - HttpMessage from the user
     * web browser.
     */
    @Override
    public void respond(HttpMessage msg) {

        this.msg = msg;
        Parser parser = new FormParser();
        Request request = parser.parseMessage(msg);
        String cleanedUri = request.getCleanedUrl();

        if (cleanedUri == null) {
            return;
        }
        if (saveUserChoices(request)) {
            return;
        }

        // Check if there is an attack.
        boolean attackOccurrence = evaluateVulnerability(cleanedUri);

        if (attackOccurrence) {
            // Show warning page for the attack.
            showWarningPage(request.getURL());
        }
    }

    /**
     * @param request - The request to be evaluated.
     * @return true if the request hash url parameters
     * from clicking on the buttons of the warning pages.
     */
    @Override
    public boolean saveUserChoices(Request request) {

        String cleanedUri = request.getCleanedUrl();

        // Check the user preference.
        try {
            if (request.isToRememberUrl()) {
                hist.addLegitimate(cleanedUri);
                setHeader(msg,cleanedUri);
                return true;
            }
            else if (request.isToRedirectUrl()) {
                hist.addVisited(cleanedUri);
                setHeader(msg,cleanedUri);
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * Attaches to the request body the typosquatting warning page.
     * @param uri - The uri of the website.
     */
    private void showWarningPage(String uri) {
        String warningPageHtml = typoSquattingWarningCreator.createWarningPage(uri, clashingSite);

        try {
            setMsgBody(msg, warningPageHtml);
        } catch (HttpMalformedHeaderException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param cleanedUri - The website the user typed in.
     * @return true if there was an attack, false otherwise.
     */
    private boolean evaluateVulnerability(String cleanedUri) {
        TypoSquattingVulnerability typosquattingAttack = new TypoSquattingVulnerability(cleanedUri, hist);
        this.clashingSite = typosquattingAttack.evaluateVulnerability();

        if (Objects.equals(clashingSite, PASSED_RULE)) {
            hist.addVisited(cleanedUri);
            return false;
        }
        else {
            return true;
        }
    }
}
