package org.zaproxy.addon.attackprevention.vulnerability;

import org.zaproxy.addon.attackprevention.rules.phishing.SameCredentialsRuleChecker;
import org.zaproxy.addon.attackprevention.utils.JSONLoader;
import org.zaproxy.addon.attackprevention.rules.Rule;

import java.util.ArrayList;
import java.util.List;

/**
 * This class inherits from the abstract
 * class Vulnerability and has the methods
 * to evaluate if there is a
 * phishing vulnerability.
 *
 * @see Vulnerability
 * @see Rule
 * @see SameCredentialsRuleChecker
 */
public class PhishingVulnerability implements Vulnerability {

    private final List<Rule> rules;
    private final String PASSED_RULE = JSONLoader.getLabel("PASSED_RULE");
    private final String ATTACK_DETECTED = JSONLoader.getLabel("ATTACK_DETECTED");

    /**
     * This method is the class constructor.
     * It contains a list of rules which
     * will be used to verify the user
     * password.
     *
     * @param password - The password from the user.
     */

    public PhishingVulnerability(String username, String password, String website) {
        rules = new ArrayList<>();
        rules.add(new SameCredentialsRuleChecker(username,password,website));
    }

    /**
     * This method verifies if the user password
     * may encompass a phishing attack.
     *
     * @return PASSED_RULE if the user password
     * passes all the phishing rules else the
     * according message.
     */
    @Override
    public String evaluateVulnerability() {

        for (Rule rule : rules) {
            if (rule.checkRule().hasPassed()) {
                return ATTACK_DETECTED;
            }
        }
        return PASSED_RULE;
    }
}
