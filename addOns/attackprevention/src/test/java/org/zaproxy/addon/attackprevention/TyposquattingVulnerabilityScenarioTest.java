package org.zaproxy.addon.attackprevention;

import org.apache.commons.httpclient.URI;
import org.apache.commons.httpclient.URIException;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.parosproxy.paros.network.HttpMalformedHeaderException;
import org.parosproxy.paros.network.HttpMessage;
import org.zaproxy.addon.attackprevention.ui.TypoSquattingWarningCreator;
import org.zaproxy.addon.attackprevention.utils.JSONLoader;

import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * This class incorporates all the scenario tests for
 * the typosquatting extension.
 */
class TyposquattingVulnerabilityScenarioTest {

    private AttackPreventionProxyListener proxy;
    private TypoSquattingWarningCreator warningCreator;
    String originalDataVisitedFile;
    String originalDataLegitimateFile;
    final String databasePath = JSONLoader.getLabel("DB_PATH");

    @BeforeEach
    void setUp() {

        String absoluteUserDirPath = System.getProperty("user.dir");

        String zapExtPath;
        if (absoluteUserDirPath.contains("zap-extensions")){
            zapExtPath=absoluteUserDirPath.substring(0,absoluteUserDirPath.indexOf("zap-extensions"));
        }
        else{
            zapExtPath=absoluteUserDirPath.substring(0,absoluteUserDirPath.indexOf("zaproxy"));
        }
        Path dbFileVisited = Path.of(zapExtPath + databasePath + "visited.txt");
        Path dbFileLegitimate = Path.of(zapExtPath + databasePath + "legitimate.txt");

        try {
            originalDataVisitedFile = Files.readString(dbFileVisited);
            originalDataLegitimateFile = Files.readString(dbFileLegitimate);
            // Make database empty to start with tests
            Files.writeString(dbFileVisited,"");
            Files.writeString(dbFileLegitimate,"");


        } catch (Exception e) {
            e.printStackTrace();
        }
        proxy = new AttackPreventionProxyListener();
        warningCreator = new TypoSquattingWarningCreator();
    }

    @Test
    /**
     * This method tests the case where the user chooses to proceed to the known website.
     */
    void ProceedToKnownWebsiteTest() throws URIException, HttpMalformedHeaderException{
        URI knownUrl = new URI("https://www.google.com", true);
        HttpMessage correctMessage = new HttpMessage(knownUrl);
        proxy.onHttpRequestSend(correctMessage);
        URI typoUrl  = new URI("https://www.goggle.com", true);
        HttpMessage typoMessage = new HttpMessage(typoUrl);
        proxy.onHttpRequestSend(typoMessage);
        String warningPage = warningCreator.createWarningPage(typoUrl.toString(), knownUrl.toString());
        assertTrue(typoMessage.getResponseBody().toString().equals(warningPage));
        HttpMessage proceedToKnowMessage = new HttpMessage(knownUrl);
        proxy.onHttpRequestSend(proceedToKnowMessage);
            }

    /**
     * This method tests the case where the user chooses to proceed to the unknown website.
     */
    @Test
    void ProceedToUnkwownWebsiteTest() throws HttpMalformedHeaderException, URIException{
        URI knownUrl = new URI("https://www.google.com", true);
        HttpMessage correctMessage = new HttpMessage(knownUrl);
        proxy.onHttpRequestSend(correctMessage);
        URI typoUrl  = new URI("https://www.goggle.com", true);
        HttpMessage typoMessage = new HttpMessage(typoUrl);
        proxy.onHttpRequestSend(typoMessage);
        String warningPage = warningCreator.createWarningPage(typoUrl.toString(), knownUrl.toString());
        assertTrue(typoMessage.getResponseBody().toString().equals(warningPage));
        URI RedirectUrl  = new URI("https://www.goggle.com?action=redirect", true);
        HttpMessage redirectMessage = new HttpMessage(RedirectUrl);
        proxy.onHttpRequestSend(redirectMessage);
        assertFalse(redirectMessage.getResponseBody().toString().contains("WARNING"));
    }

    /**
     * This method tests the case where the user chooses to proceed to the known website and wants to remember his preference.
     */
    @Test
    void ProceedToKnownWithPreferenceTest() throws URIException, HttpMalformedHeaderException {
        URI knownUrl = new URI("https://www.google.com", true);
        HttpMessage correctMessage = new HttpMessage(knownUrl);
        proxy.onHttpRequestSend(correctMessage);
        URI rememberKnownUrl = new URI("https://www.google.com?action=remember", true);
        HttpMessage rememberKnownMessage = new HttpMessage(rememberKnownUrl);
        proxy.onHttpRequestSend(rememberKnownMessage);
        assertFalse(rememberKnownMessage.getResponseBody().toString().contains("WARNING"));
    }


    /**
     * This method tests the case where the user chooses to proceed to the unknown website and wants to remember his preference.
     */
    @Test
    void ProceedToUnkownWebsiteWithPreferenceTest() throws URIException, HttpMalformedHeaderException {
        URI knownUrl = new URI("https://www.google.com", true);
        HttpMessage correctMessage = new HttpMessage(knownUrl);
        proxy.onHttpRequestSend(correctMessage);
        URI typoUrl  = new URI("https://www.goggle.com", true);
        HttpMessage typoMessage = new HttpMessage(typoUrl);
        proxy.onHttpRequestSend(typoMessage);
        String warningPage = warningCreator.createWarningPage(typoUrl.toString(), knownUrl.toString());
        assertTrue(typoMessage.getResponseBody().toString().equals(warningPage));
        URI rememberTypoUrl = new URI("https://www.goggle.com?action=remember", true);
        HttpMessage rememberTypomessage = new HttpMessage(rememberTypoUrl);
        proxy.onHttpRequestSend(rememberTypomessage);
        assertFalse(rememberTypomessage.getResponseBody().toString().contains("WARNING"));
    }

    @AfterEach
    void afterTests(){

        String absoluteUserDirPath = System.getProperty("user.dir");

        String zapExtPath;
        if (absoluteUserDirPath.contains("zap-extensions")){
            zapExtPath=absoluteUserDirPath.substring(0,absoluteUserDirPath.indexOf("zap-extensions"));
        }
        else{
            zapExtPath=absoluteUserDirPath.substring(0,absoluteUserDirPath.indexOf("zaproxy"));
        }
        Path dbFileVisited = Path.of(zapExtPath + databasePath + "visited.txt");
        Path dbFileLegitimate = Path.of(zapExtPath + databasePath + "legitimate.txt");

        try {
            Files.writeString(dbFileVisited,originalDataVisitedFile);
            Files.writeString(dbFileLegitimate,originalDataLegitimateFile);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
