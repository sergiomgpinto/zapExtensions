package org.zaproxy.addon.attackprevention;

import org.junit.jupiter.api.Test;
import org.zaproxy.addon.attackprevention.database.TyposquattingHistory;
import org.zaproxy.addon.attackprevention.utils.JSONLoader;
import org.zaproxy.addon.attackprevention.vulnerability.TypoSquattingVulnerability;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * This class incorporates all the unit tests for the
 * typoSquattingAttack class.
 *
 * @see TypoSquattingVulnerability
 */
class TypoSquattingVulnerabilityUnitTest {

    private final String PASSED_RULE = JSONLoader.getLabel("PASSED_RULE");

    /**
     * This method tests two website with a replaced char.
     */
    @Test
    void TypoSquattingFailCaseReplacedCharTest() {
        String typedWebsite = "https://www.failcasatest.com";
        String knownWebsite = "https://www.failcasetest.com";

        TyposquattingHistory history = new TyposquattingHistory();
        history.addVisited(knownWebsite);
        assertTrue(history.isVisited(knownWebsite));

        TypoSquattingVulnerability attack = new TypoSquattingVulnerability(typedWebsite, history);

        assertEquals(knownWebsite, attack.evaluateVulnerability());
    }

    /**
     * This method tests two website with a swapped char.
     */
    @Test
    void TypoSquattingFailCaseSwappedCharsTest() {
        String typedWebsite = "https://www.failcaestest.com";
        String knownWebsite = "https://www.failcasetest.com";

        TyposquattingHistory history = new TyposquattingHistory();
        history.addVisited(knownWebsite);
        assertTrue(history.isVisited(knownWebsite));

        TypoSquattingVulnerability attack = new TypoSquattingVulnerability(typedWebsite, history);

        assertEquals(knownWebsite, attack.evaluateVulnerability());
    }

    /**
     * This method tests two website with a missing char.
     */
    @Test
    void TypoSquattingFailCaseMissingCharTest() {
        String typedWebsite = "https://www.failcastest.com";
        String knownWebsite = "https://www.failcasetest.com";

        TyposquattingHistory history = new TyposquattingHistory();
        history.addVisited(knownWebsite);
        assertTrue(history.isVisited(knownWebsite));

        TypoSquattingVulnerability attack = new TypoSquattingVulnerability(typedWebsite, history);

        assertEquals(knownWebsite, attack.evaluateVulnerability());
    }

    /**
     * This method tests two website with where one has an extra word added at the end.
     */
    @Test
    void TypoSquattingFailCaseCombosquattingTest() {
        String typedWebsite = "https://www.failcasetest-new.com";
        String knownWebsite = "https://www.failcasetest.com";

        TyposquattingHistory history = new TyposquattingHistory();
        history.addVisited(knownWebsite);
        assertTrue(history.isVisited(knownWebsite));

        TypoSquattingVulnerability attack = new TypoSquattingVulnerability(typedWebsite, history);

        assertEquals(knownWebsite, attack.evaluateVulnerability());
    }

    /**
     * This method tests two website where one had an extra char at the end.
     */
    @Test
    void TypoSquattingFailCaseExtraCharTest() {
        String typedWebsite = "https://www.failcaseetest.com";
        String knownWebsite = "https://www.failcasetest.com";

        TyposquattingHistory history = new TyposquattingHistory();
        history.addVisited(knownWebsite);
        assertTrue(history.isVisited(knownWebsite));

        TypoSquattingVulnerability attack = new TypoSquattingVulnerability(typedWebsite, history);

        assertEquals(knownWebsite, attack.evaluateVulnerability());
    }

    /**
     * This method tests two website that are exactly the same.
     */
    @Test
    void TypoSquattingGoodCaseWithCorrectlyTypedWebsiteTest() {
        String typedWebsite = "https://www.goodcasetest.com";
        String knownWebsite = "https://www.goodcasetest.com";

        TyposquattingHistory history = new TyposquattingHistory();
        history.addVisited(knownWebsite);
        assertTrue(history.isVisited(knownWebsite));

        TypoSquattingVulnerability attack = new TypoSquattingVulnerability(typedWebsite, history);

        assertEquals(PASSED_RULE, attack.evaluateVulnerability());
    }

    /**
     * This method tests two different website that are not similar.
     */
    @Test
    void TypoSquattingGoodCaseWithNotEqualWebsitesTest() {
        String typedWebsite = "https://www.goodcasetestbutdifferent.com";
        String knownWebsite = "https://www.goodcasetest.com";

        TyposquattingHistory history = new TyposquattingHistory();
        history.addVisited(knownWebsite);
        assertTrue(history.isVisited(knownWebsite));

        TypoSquattingVulnerability attack = new TypoSquattingVulnerability(typedWebsite, history);

        assertEquals(PASSED_RULE, attack.evaluateVulnerability());
    }
    /**
     * This method tests two website that are exactly the same and is a legitimate website.
     */
    @Test
    void TypoSquattingGoodCaseWithTypedWebsiteBeingALegitimateWebsiteTest() {
        String typedWebsite = "https://www.goodcasetest.com";
        String knownWebsite = "https://www.goodcasetest.com";

        TyposquattingHistory history = new TyposquattingHistory();
        history.addLegitimate(knownWebsite);
        assertTrue(history.isLegitimate(knownWebsite));

        TypoSquattingVulnerability attack = new TypoSquattingVulnerability(typedWebsite, history);

        assertEquals(PASSED_RULE, attack.evaluateVulnerability());
    }
}