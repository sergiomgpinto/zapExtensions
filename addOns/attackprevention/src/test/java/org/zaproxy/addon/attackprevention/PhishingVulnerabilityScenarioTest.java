package org.zaproxy.addon.attackprevention;

import org.apache.commons.httpclient.URI;
import org.apache.commons.httpclient.URIException;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.parosproxy.paros.network.HttpMessage;
import org.parosproxy.paros.network.HttpRequestHeader;
import org.zaproxy.addon.attackprevention.database.PasswordHygieneHistoryTesting;
import org.zaproxy.addon.attackprevention.ui.PhishingWarningCreator;
import org.zaproxy.addon.attackprevention.utils.JSONLoader;
import org.zaproxy.zap.network.HttpRequestBody;

import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertNotEquals;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * This class verifies different scenarios of phishing vulnerabilities
 */
class PhishingVulnerabilityScenarioTest {

    private AttackPreventionProxyListener proxy;

    private PhishingWarningCreator phishingWarningCreator;

    String originalDataVisitedFile;
    String originalDataLegitimateFile;
    String originalDataUserPwdPref;
    String originalDataCredentialSites;
    String originalDataCredentialLegitimateSites;
    final String databasePath = JSONLoader.getLabel("DB_PATH");

    @BeforeEach
    void setUp() {

        String absoluteUserDirPath = System.getProperty("user.dir");

        String zapExtPath;
        if (absoluteUserDirPath.contains("zap-extensions")){
            zapExtPath=absoluteUserDirPath.substring(0,absoluteUserDirPath.indexOf("zap-extensions"));
        }
        else{
            zapExtPath=absoluteUserDirPath.substring(0,absoluteUserDirPath.indexOf("zaproxy"));
        }
        Path dbFileVisited = Path.of(zapExtPath + databasePath + "visited.txt");
        Path dbFileLegitimate = Path.of(zapExtPath + databasePath + "legitimate.txt");
        Path dbFileUserPwdPref = Path.of(zapExtPath + databasePath + "userPasswordWarningPreferences.txt");
        Path dbFileCredentialsSites = Path.of(zapExtPath + databasePath + "phishing_credential_sites.txt");
        Path dbFileCredentialLegitimateSites = Path.of(zapExtPath + databasePath
                + "phishing_credential_legitimate_sites.txt");

        try {
            originalDataVisitedFile = Files.readString(dbFileVisited);
            originalDataLegitimateFile = Files.readString(dbFileLegitimate);
            originalDataUserPwdPref = Files.readString(dbFileUserPwdPref);
            originalDataCredentialSites = Files.readString(dbFileCredentialsSites);
            originalDataCredentialLegitimateSites = Files.readString(dbFileCredentialLegitimateSites);
            // Make database empty to start with tests
            Files.writeString(dbFileVisited,"");
            Files.writeString(dbFileLegitimate,"");
            Files.writeString(dbFileUserPwdPref,"");
            Files.writeString(dbFileCredentialsSites,"");
            Files.writeString(dbFileCredentialLegitimateSites,"");


        } catch (Exception e) {
            e.printStackTrace();
        }
        proxy = new AttackPreventionProxyListener();
        phishingWarningCreator = new PhishingWarningCreator();
    }

    /**
     * This method tests the case where the user cancels the login after the login warning page.
     */
    @Test
    void cancelLoginAfterWarningScenarioTest() throws URIException {

        PasswordHygieneHistoryTesting passwordHygieneHistory = new PasswordHygieneHistoryTesting();

        passwordHygieneHistory.setPasswordHygieneMechanismEnabled(false);

        URI knownUrl = new URI("https://www.google.com", true);
        HttpRequestHeader reqHeader = new HttpRequestHeader();
        reqHeader.setURI(knownUrl);
        reqHeader.setMethod("POST");
        HttpRequestBody requestBody = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage firstLoginMsg = new HttpMessage(reqHeader, requestBody);

        proxy.onHttpRequestSend(firstLoginMsg);

        URI phishingUrl  = new URI("https://www.facebook.com", true);

        HttpRequestHeader reqHeader2 = new HttpRequestHeader();
        reqHeader2.setURI(phishingUrl);
        reqHeader2.setMethod("POST");
        HttpRequestBody requestBody2 = new HttpRequestBody("service=\"login\";login=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage phishingMessage = new HttpMessage(reqHeader2, requestBody2);

        proxy.onHttpRequestSend(phishingMessage);

        String warningPage = phishingWarningCreator.createWarningPage("LoginWarning",
                phishingUrl.toString(), phishingUrl.toString());
        assertEquals(warningPage,phishingMessage.getResponseBody().toString());

        URI cancelLoginUrl = new URI("https://www.facebook.com?action=cancel-login", true);

        HttpRequestHeader reqHeader3 = new HttpRequestHeader();
        reqHeader3.setURI(cancelLoginUrl);
        reqHeader3.setMethod("POST");
        HttpRequestBody requestBody3 = new HttpRequestBody("service=\"login\";uname=\"cristiano%40gmail.com\";pass=\"cristianoronaldo\";");
        HttpMessage cancelLoginMessage = new HttpMessage(reqHeader3, requestBody3);

        proxy.onHttpRequestSend(cancelLoginMessage);


        assertEquals(phishingUrl,cancelLoginMessage.getRequestHeader().getURI());
    }

    /**
     * This method tests the case where the user continues the login after the login warning page.
     */
    @Test
    void continueLoginAfterWarningScenarioTest() throws URIException {

        PasswordHygieneHistoryTesting passwordHygieneHistory = new PasswordHygieneHistoryTesting();

        passwordHygieneHistory.setPasswordHygieneMechanismEnabled(false);

        URI knownUrl = new URI("https://www.google.com", true);
        HttpRequestHeader reqHeader = new HttpRequestHeader();
        reqHeader.setURI(knownUrl);
        reqHeader.setMethod("POST");
        HttpRequestBody requestBody = new HttpRequestBody("service=\"login\";identifier=\"cristiano\";passwd=\"cristianoronaldo\";");
        HttpMessage firstLoginMsg = new HttpMessage(reqHeader, requestBody);

        proxy.onHttpRequestSend(firstLoginMsg);

        URI phishingUrl  = new URI("https://www.facebook.com", true);

        HttpRequestHeader reqHeader2 = new HttpRequestHeader();
        reqHeader2.setURI(phishingUrl);
        reqHeader2.setMethod("POST");
        HttpRequestBody requestBody2 = new HttpRequestBody("service=\"login\";username=\"cristiano\";pwd=\"cristianoronaldo\";");
        HttpMessage phishingMessage = new HttpMessage(reqHeader2, requestBody2);

        proxy.onHttpRequestSend(phishingMessage);

        String warningPage = phishingWarningCreator.createWarningPage("LoginWarning",
                phishingUrl.toString(), phishingUrl.toString());
        assertEquals(warningPage,phishingMessage.getResponseBody().toString());

        URI continueLoginUrl = new URI("https://www.facebook.com?action=continue-login", true);

        HttpRequestHeader reqHeader3 = new HttpRequestHeader();
        reqHeader3.setURI(continueLoginUrl);
        reqHeader3.setMethod("POST");
        HttpRequestBody requestBody3 = new HttpRequestBody("service=\"login\";user=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage continueLoginMessage = new HttpMessage(reqHeader3, requestBody3);

        proxy.onHttpRequestSend(continueLoginMessage);

        URI expectedUrl = new URI("https://www.facebook.com", true);

        assertEquals(expectedUrl,continueLoginMessage.getRequestHeader().getURI());
    }

    /**
     * This method tests the case where a user logs in to a website which  he had recently be shown the login warning page
     * and proceeded.
     */
    @Test
    void recentlyShownLoginWarningPageAndProceededScenarioTest() throws URIException {
        PasswordHygieneHistoryTesting passwordHygieneHistory = new PasswordHygieneHistoryTesting();

        passwordHygieneHistory.setPasswordHygieneMechanismEnabled(false);

        URI knownUrl = new URI("https://www.google.com", true);
        HttpRequestHeader reqHeader = new HttpRequestHeader();
        reqHeader.setURI(knownUrl);
        reqHeader.setMethod("POST");
        HttpRequestBody requestBody = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage firstLoginMsg = new HttpMessage(reqHeader, requestBody);

        proxy.onHttpRequestSend(firstLoginMsg);

        URI phishingUrl  = new URI("https://www.facebook.com", true);

        HttpRequestHeader reqHeader2 = new HttpRequestHeader();
        reqHeader2.setURI(phishingUrl);
        reqHeader2.setMethod("POST");
        HttpRequestBody requestBody2 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage phishingMessage = new HttpMessage(reqHeader2, requestBody2);

        proxy.onHttpRequestSend(phishingMessage);

        String warningPage = phishingWarningCreator.createWarningPage("LoginWarning",
                phishingUrl.toString(), phishingUrl.toString());
        assertEquals(warningPage,phishingMessage.getResponseBody().toString());

        URI continueLoginUrl = new URI("https://www.facebook.com?action=continue-login", true);

        HttpRequestHeader reqHeader3 = new HttpRequestHeader();
        reqHeader3.setURI(continueLoginUrl);
        reqHeader3.setMethod("POST");
        HttpRequestBody requestBody3 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage continueLoginMessage = new HttpMessage(reqHeader3, requestBody3);

        proxy.onHttpRequestSend(continueLoginMessage);

        URI expectedUrl = new URI("https://www.facebook.com", true);

        assertEquals(expectedUrl,continueLoginMessage.getRequestHeader().getURI());


        URI newLoginUrl = new URI("https://www.facebook.com", true);

        HttpRequestHeader reqHeader4 = new HttpRequestHeader();
        reqHeader4.setURI(newLoginUrl);
        reqHeader4.setMethod("POST");
        HttpRequestBody requestBody4 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage newLoginMessage = new HttpMessage(reqHeader4, requestBody4);

        proxy.onHttpRequestSend(newLoginMessage);

        String newWarningPage = phishingWarningCreator.createWarningPage("LoginWarning",
                newLoginUrl.toString(), newLoginUrl.toString());

        assertEquals(newWarningPage,phishingMessage.getResponseBody().toString());
    }

    /**
     * This method tests the case where a user logs in to a website which he had recently
     * be shown the login warning page and canceled the login
     */
    @Test
    void recentlyShownLoginWarningPageAndCanceledScenarioTest() throws URIException {
        PasswordHygieneHistoryTesting passwordHygieneHistory = new PasswordHygieneHistoryTesting();

        passwordHygieneHistory.setPasswordHygieneMechanismEnabled(false);

        URI knownUrl = new URI("https://www.google.com", true);
        HttpRequestHeader reqHeader = new HttpRequestHeader();
        reqHeader.setURI(knownUrl);
        reqHeader.setMethod("POST");
        HttpRequestBody requestBody = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage firstLoginMsg = new HttpMessage(reqHeader, requestBody);

        proxy.onHttpRequestSend(firstLoginMsg);

        URI phishingUrl  = new URI("https://www.facebook.com", true);

        HttpRequestHeader reqHeader2 = new HttpRequestHeader();
        reqHeader2.setURI(phishingUrl);
        reqHeader2.setMethod("POST");
        HttpRequestBody requestBody2 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage phishingMessage = new HttpMessage(reqHeader2, requestBody2);

        proxy.onHttpRequestSend(phishingMessage);

        String warningPage = phishingWarningCreator.createWarningPage("LoginWarning",
                phishingUrl.toString(), phishingUrl.toString());
        assertEquals(warningPage,phishingMessage.getResponseBody().toString());

        URI cancelLoginUrl = new URI("https://www.google.com?action=cancel-login", true);

        HttpRequestHeader reqHeader3 = new HttpRequestHeader();
        reqHeader3.setURI(cancelLoginUrl);
        reqHeader3.setMethod("POST");
        HttpRequestBody requestBody3 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage cancelLoginMessage = new HttpMessage(reqHeader3, requestBody3);

        proxy.onHttpRequestSend(cancelLoginMessage);

        URI expectedUrl = new URI("https://www.google.com", true);

        assertEquals(expectedUrl,cancelLoginMessage.getRequestHeader().getURI());


        URI newLoginUrl = new URI("https://www.facebook.com", true);

        HttpRequestHeader reqHeader4 = new HttpRequestHeader();
        reqHeader4.setURI(newLoginUrl);
        reqHeader4.setMethod("POST");
        HttpRequestBody requestBody4 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage newLoginMessage = new HttpMessage(reqHeader4, requestBody4);

        proxy.onHttpRequestSend(newLoginMessage);

        String newWarningPage = phishingWarningCreator.createWarningPage("LoginWarning",
                newLoginUrl.toString(), newLoginUrl.toString());

        assertEquals(newWarningPage,phishingMessage.getResponseBody().toString());

    }

    /**
     * This method tests the case where a user logs in with a badd password
     */
    @Test
    void loginBadPasswordScenarioTest() throws URIException{
        PasswordHygieneHistoryTesting passwordHygieneHistory = new PasswordHygieneHistoryTesting();

        passwordHygieneHistory.setPasswordHygieneMechanismEnabled(true);

        URI knownUrl = new URI("https://www.google.com", true);
        HttpRequestHeader reqHeader = new HttpRequestHeader();
        reqHeader.setURI(knownUrl);
        reqHeader.setMethod("POST");
        HttpRequestBody requestBody = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage firstLoginMsg = new HttpMessage(reqHeader, requestBody);

        proxy.onHttpRequestSend(firstLoginMsg);

        String warningPage = phishingWarningCreator.createWarningPage("PasswordWarning",
                knownUrl.toString(),"It''s too short.");
        assertEquals(warningPage,firstLoginMsg.getResponseBody().toString());
    }

    /**
     * This method tests the case where a user logs in with a bad password and ticks the
     * do-not-show-this-warning-for-this-site-again box and continues
     */
    @Test
    void loginBadPasswordRememberContinueScenarioTest() throws URIException{
        PasswordHygieneHistoryTesting passwordHygieneHistory = new PasswordHygieneHistoryTesting();

        passwordHygieneHistory.setPasswordHygieneMechanismEnabled(true);

        URI knownUrl = new URI("https://www.google.com", true);
        HttpRequestHeader reqHeader = new HttpRequestHeader();
        reqHeader.setURI(knownUrl);
        reqHeader.setMethod("POST");
        HttpRequestBody requestBody = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage firstLoginMsg = new HttpMessage(reqHeader, requestBody);

        proxy.onHttpRequestSend(firstLoginMsg);

        String warningPage = phishingWarningCreator.createWarningPage("PasswordWarning",
                knownUrl.toString(),"It''s too short.");
        assertEquals(warningPage,firstLoginMsg.getResponseBody().toString());

        URI willNotShowPasswordWarningUrl = new URI("https://www.google.com?action=dont-show-again", true);

        HttpRequestHeader reqHeader2 = new HttpRequestHeader();
        reqHeader2.setURI(willNotShowPasswordWarningUrl);
        reqHeader2.setMethod("POST");
        HttpRequestBody requestBody2 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage willNotShowPasswordWarningMessage = new HttpMessage(reqHeader2, requestBody2);

        proxy.onHttpRequestSend(willNotShowPasswordWarningMessage);

        assertNotEquals(warningPage,willNotShowPasswordWarningMessage.getResponseBody().toString());
        assertEquals(knownUrl,willNotShowPasswordWarningMessage.getRequestHeader().getURI());
    }

    /**
     * This method tests the case where a user logs in with a bad password to a site which he previously was shown
     * the password warning and he ticked the box
     */
    @Test
    void loginBadPasswordPreviouslyTickedBoxScenarioTest() throws URIException{
        PasswordHygieneHistoryTesting passwordHygieneHistory = new PasswordHygieneHistoryTesting();

        passwordHygieneHistory.setPasswordHygieneMechanismEnabled(true);

        URI knownUrl = new URI("https://www.google.com", true);
        HttpRequestHeader reqHeader = new HttpRequestHeader();
        reqHeader.setURI(knownUrl);
        reqHeader.setMethod("POST");
        HttpRequestBody requestBody = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage firstLoginMsg = new HttpMessage(reqHeader, requestBody);

        proxy.onHttpRequestSend(firstLoginMsg);

        String warningPage = phishingWarningCreator.createWarningPage("PasswordWarning",
                knownUrl.toString(),"It''s too short.");
        assertEquals(warningPage,firstLoginMsg.getResponseBody().toString());

        URI willNotShowPasswordWarningUrl = new URI("https://www.google.com?action=dont-show-again", true);

        HttpRequestHeader reqHeader2 = new HttpRequestHeader();
        reqHeader2.setURI(willNotShowPasswordWarningUrl);
        reqHeader2.setMethod("POST");
        HttpRequestBody requestBody2 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage willNotShowPasswordWarningMessage = new HttpMessage(reqHeader2, requestBody2);

        proxy.onHttpRequestSend(willNotShowPasswordWarningMessage);

        assertNotEquals(warningPage,willNotShowPasswordWarningMessage.getResponseBody().toString());
        assertEquals(knownUrl,willNotShowPasswordWarningMessage.getRequestHeader().getURI());

        URI willNotShowPasswordWarningAgainUrl = new URI("https://www.google.com", true);

        HttpRequestHeader reqHeader3 = new HttpRequestHeader();
        reqHeader3.setURI(willNotShowPasswordWarningAgainUrl);
        reqHeader3.setMethod("POST");
        HttpRequestBody requestBody3 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage willNotShowPasswordWarningAgainMessage = new HttpMessage(reqHeader3, requestBody3);

        proxy.onHttpRequestSend(willNotShowPasswordWarningAgainMessage);
        assertNotEquals(warningPage,willNotShowPasswordWarningAgainMessage.getResponseBody().toString());
        assertEquals(knownUrl,willNotShowPasswordWarningAgainMessage.getRequestHeader().getURI());
    }

    /**
     * This method tests the case where a user logs in with a bad password and does not tick the box
     * and continues
     */
    @Test
    void loginsBadPasswordDontRememberScenarioTest() throws URIException{
        PasswordHygieneHistoryTesting passwordHygieneHistory = new PasswordHygieneHistoryTesting();

        passwordHygieneHistory.setPasswordHygieneMechanismEnabled(true);

        URI knownUrl = new URI("https://www.google.com", true);
        HttpRequestHeader reqHeader = new HttpRequestHeader();
        reqHeader.setURI(knownUrl);
        reqHeader.setMethod("POST");
        HttpRequestBody requestBody = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage firstLoginMsg = new HttpMessage(reqHeader, requestBody);

        proxy.onHttpRequestSend(firstLoginMsg);

        String warningPage = phishingWarningCreator.createWarningPage("PasswordWarning",
                knownUrl.toString(),"It''s too short.");
        assertEquals(warningPage,firstLoginMsg.getResponseBody().toString());

        URI willShowPasswordWarningUrl = new URI("https://www.google.com?action=continue-password-warning", true);

        HttpRequestHeader reqHeader2 = new HttpRequestHeader();
        reqHeader2.setURI(willShowPasswordWarningUrl);
        reqHeader2.setMethod("POST");
        HttpRequestBody requestBody2 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage userContinuesMessage = new HttpMessage(reqHeader2, requestBody2);

        proxy.onHttpRequestSend(userContinuesMessage);

        assertNotEquals(warningPage,userContinuesMessage.getResponseBody().toString());
        assertEquals(knownUrl,userContinuesMessage.getRequestHeader().getURI());
    }

    /**
     * This method tests the case where a user logs in with a bad password to a site which he previously was
     * shown the password warning and he did not tick the box
     */
    @Test
    void loginsBadPasswordPreviouslyDontRememberScenarioTest() throws URIException{
        PasswordHygieneHistoryTesting passwordHygieneHistory = new PasswordHygieneHistoryTesting();

        passwordHygieneHistory.setPasswordHygieneMechanismEnabled(true);

        URI knownUrl = new URI("https://www.google.com", true);
        HttpRequestHeader reqHeader = new HttpRequestHeader();
        reqHeader.setURI(knownUrl);
        reqHeader.setMethod("POST");
        HttpRequestBody requestBody = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage firstLoginMsg = new HttpMessage(reqHeader, requestBody);

        proxy.onHttpRequestSend(firstLoginMsg);

        String warningPage = phishingWarningCreator.createWarningPage("PasswordWarning",
                knownUrl.toString(),"It''s too short.");
        assertEquals(warningPage,firstLoginMsg.getResponseBody().toString());

        URI willNotShowPasswordWarningUrl = new URI("https://www.google.com?action=continue-password-warning", true);

        HttpRequestHeader reqHeader2 = new HttpRequestHeader();
        reqHeader2.setURI(willNotShowPasswordWarningUrl);
        reqHeader2.setMethod("POST");
        HttpRequestBody requestBody2 = new HttpRequestBody("service=\"login\";username=\"cristiano\";password=\"cristianoronaldo\";");
        HttpMessage willNotShowPasswordWarningMessage = new HttpMessage(reqHeader2, requestBody2);

        proxy.onHttpRequestSend(willNotShowPasswordWarningMessage);

        assertNotEquals(warningPage,willNotShowPasswordWarningMessage.getResponseBody().toString());
        assertEquals(knownUrl,willNotShowPasswordWarningMessage.getRequestHeader().getURI());

        URI willNotShowPasswordWarningUrlJson = new URI("https://www.google.com", true);

        HttpRequestHeader reqHeader2Json = new HttpRequestHeader();
        reqHeader2Json.setURI(willNotShowPasswordWarningUrlJson);
        reqHeader2Json.setMethod("POST");
        HttpRequestBody requestBody2Json = new HttpRequestBody("{\"\"email\":\"lionel\"\",\"\"password\":\"messi\"\"}");
        HttpMessage willNotShowPasswordWarningMessageJson = new HttpMessage(reqHeader2Json, requestBody2Json);

        proxy.onHttpRequestSend(willNotShowPasswordWarningMessageJson);

        // assertNotEquals(warningPage,willNotShowPasswordWarningMessageJson.getResponseBody().toString());
        assertEquals(knownUrl,willNotShowPasswordWarningMessageJson.getRequestHeader().getURI());


        URI willShowPasswordWarningAgainUrl = new URI("https://www.google.com", true);

        HttpRequestHeader reqHeader3 = new HttpRequestHeader();
        reqHeader3.setURI(willShowPasswordWarningAgainUrl);
        reqHeader3.setMethod("POST");
        HttpRequestBody requestBody3 = new HttpRequestBody("{\"\"login\":\"lionel\"\",\"\"password\":\"messi\"\"}");
        HttpMessage willShowPasswordWarningAgainMessage = new HttpMessage(reqHeader3, requestBody3);

        proxy.onHttpRequestSend(willShowPasswordWarningAgainMessage);
        proxy.onHttpResponseReceive(willShowPasswordWarningAgainMessage);
        assertEquals(warningPage,willShowPasswordWarningAgainMessage.getResponseBody().toString());
    }

    @AfterEach
    void afterTests(){

        String absoluteUserDirPath = System.getProperty("user.dir");

        String zapExtPath;
        if (absoluteUserDirPath.contains("zap-extensions")){
            zapExtPath=absoluteUserDirPath.substring(0,absoluteUserDirPath.indexOf("zap-extensions"));
        }
        else{
            zapExtPath=absoluteUserDirPath.substring(0,absoluteUserDirPath.indexOf("zaproxy"));
        }
        Path dbFileVisited = Path.of(zapExtPath + databasePath + "visited.txt");
        Path dbFileLegitimate = Path.of(zapExtPath + databasePath + "legitimate.txt");
        Path dbFileUserPwdPref = Path.of(zapExtPath + databasePath + "userPasswordWarningPreferences.txt");
        Path dbFileCredentialsSites = Path.of(zapExtPath + databasePath + "phishing_credential_sites.txt");
        Path dbFileCredentialLegitimateSites = Path.of(zapExtPath + databasePath
                + "phishing_credential_legitimate_sites.txt");

        try {
            Files.writeString(dbFileVisited,originalDataVisitedFile);
            Files.writeString(dbFileLegitimate,originalDataLegitimateFile);
            Files.writeString(dbFileUserPwdPref,originalDataUserPwdPref);
            Files.writeString(dbFileCredentialsSites,originalDataCredentialSites);
            Files.writeString(dbFileCredentialLegitimateSites,originalDataCredentialLegitimateSites);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
